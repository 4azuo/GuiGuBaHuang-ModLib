#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script s·ª≠a l·ªói JSON syntax trong c√°c file localText.json
- S·ª≠a trailing comma (d·∫•u ph·∫©y d∆∞ ·ªü cu·ªëi m·∫£ng/object)
- Validate v√† format l·∫°i JSON
"""

import json
import os
import glob
import re
from pathlib import Path
from typing import List, Dict, Any
import argparse

class JSONSyntaxFixer:
    def __init__(self):
        self.fixed_count = 0
        self.error_count = 0
        
    def fix_trailing_commas(self, content: str) -> str:
        """S·ª≠a trailing comma trong JSON"""
        # S·ª≠a trailing comma tr∆∞·ªõc ƒë√≥ng ngo·∫∑c }
        content = re.sub(r',(\s*})', r'\1', content)
        
        # S·ª≠a trailing comma tr∆∞·ªõc ƒë√≥ng ngo·∫∑c ]
        content = re.sub(r',(\s*])', r'\1', content)
        
        return content
    
    def fix_json_file(self, file_path: str) -> bool:
        """S·ª≠a l·ªói JSON trong m·ªôt file"""
        print(f"üîß S·ª≠a: {os.path.relpath(file_path)}")
        
        try:
            # ƒê·ªçc file g·ªëc
            with open(file_path, 'r', encoding='utf-8') as f:
                original_content = f.read()
            
            # Th·ª≠ parse JSON tr∆∞·ªõc khi s·ª≠a
            try:
                json.loads(original_content)
                print(f"  ‚úÖ File ƒë√£ h·ª£p l·ªá, kh√¥ng c·∫ßn s·ª≠a")
                return True
            except json.JSONDecodeError as e:
                print(f"  üîç Ph√°t hi·ªán l·ªói JSON: {e.msg} (line {e.lineno})")
            
            # S·ª≠a trailing comma
            fixed_content = self.fix_trailing_commas(original_content)
            
            # Th·ª≠ parse JSON sau khi s·ª≠a
            try:
                data = json.loads(fixed_content)
                
                # Format l·∫°i JSON v·ªõi indent
                formatted_content = json.dumps(data, ensure_ascii=False, indent='\t')
                
                # L∆∞u file ƒë√£ s·ª≠a
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(formatted_content)
                
                print(f"  ‚úÖ ƒê√£ s·ª≠a v√† format l·∫°i")
                self.fixed_count += 1
                return True
                
            except json.JSONDecodeError as e:
                print(f"  ‚ùå V·∫´n c√≥ l·ªói sau khi s·ª≠a: {e.msg} (line {e.lineno})")
                
                # Th·ª≠ s·ª≠a th√™m m·ªôt s·ªë l·ªói ph·ªï bi·∫øn kh√°c
                fixed_content = self.fix_additional_issues(fixed_content)
                
                try:
                    data = json.loads(fixed_content)
                    formatted_content = json.dumps(data, ensure_ascii=False, indent='\t')
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(formatted_content)
                    
                    print(f"  ‚úÖ ƒê√£ s·ª≠a sau l·∫ßn th·ª≠ th·ª© 2")
                    self.fixed_count += 1
                    return True
                    
                except json.JSONDecodeError as e:
                    print(f"  ‚ùå Kh√¥ng th·ªÉ s·ª≠a: {e.msg} (line {e.lineno})")
                    self.error_count += 1
                    return False
                
        except Exception as e:
            print(f"  ‚ùå L·ªói x·ª≠ l√Ω file: {e}")
            self.error_count += 1
            return False
    
    def fix_additional_issues(self, content: str) -> str:
        """S·ª≠a c√°c l·ªói JSON ph·ªï bi·∫øn kh√°c"""
        
        # S·ª≠a single quote th√†nh double quote (n·∫øu c√≥)
        content = re.sub(r"'([^']*)':", r'"\1":', content)
        
        # S·ª≠a missing quote cho key
        content = re.sub(r'(\w+):', r'"\1":', content)
        
        # S·ª≠a c√°c trailing comma c√≤n s√≥t
        content = re.sub(r',(\s*[}\]])', r'\1', content)
        
        return content
    
    def fix_all_files(self, root_dir: str, pattern: str = "**/*localText.json"):
        """S·ª≠a t·∫•t c·∫£ file localText.json"""
        print(f"üöÄ S·ª≠a l·ªói JSON syntax trong: {root_dir}")
        print(f"üìÅ Pattern: {pattern}")
        
        # T√¨m t·∫•t c·∫£ file localText.json
        search_pattern = os.path.join(root_dir, pattern)
        files = glob.glob(search_pattern, recursive=True)
        files = [f for f in files if os.path.isfile(f)]
        
        print(f"üìä T√¨m th·∫•y {len(files)} file c·∫ßn ki·ªÉm tra")
        
        if not files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o!")
            return
        
        # X·ª≠ l√Ω t·ª´ng file
        for i, file_path in enumerate(files, 1):
            print(f"\n[{i}/{len(files)}]", end=" ")
            self.fix_json_file(file_path)
        
        # Th·ªëng k√™
        print(f"\nüéâ Ho√†n th√†nh!")
        print(f"‚úÖ ƒê√£ s·ª≠a: {self.fixed_count} file")
        print(f"‚ùå L·ªói: {self.error_count} file")
        print(f"üìÑ T·ªïng: {len(files)} file")
        
        if self.error_count > 0:
            print(f"\nüí° Tip: Ki·ªÉm tra th·ªß c√¥ng {self.error_count} file b·ªã l·ªói")

def main():
    parser = argparse.ArgumentParser(description='S·ª≠a l·ªói JSON syntax trong file localText.json')
    parser.add_argument('--root', '-r', default='.', help='Th∆∞ m·ª•c g·ªëc')
    parser.add_argument('--pattern', '-p', default='**/*localText.json', help='Pattern t√¨m file')
    
    args = parser.parse_args()
    
    root_dir = os.path.abspath(args.root)
    
    if not os.path.exists(root_dir):
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {root_dir}")
        return
    
    fixer = JSONSyntaxFixer()
    fixer.fix_all_files(root_dir, args.pattern)

if __name__ == "__main__":
    main()

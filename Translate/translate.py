#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ch√≠nh ƒë·ªÉ x·ª≠ l√Ω v√† d·ªãch c√°c file *localText.json

C√°ch s·ª≠ d·ª•ng:
    python 00-translate.py --project 3385996759 --path .
    python 00-translate.py --project 3385996759 --path game_localText.json --dry-run
    python 00-translate.py --project 3385996759 --path . --create-locales vi,es,fr
"""

import os
import time
import argparse
import re
from typing import List, Optional
from deep_translator import GoogleTranslator

# Import modules
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from consts import (
    DEFAULT_TARGET_LANGUAGES, 
    TRANSLATION_CONFIG, 
    SKIP_TRANSLATION_PATTERNS,
    DIR_PATTERNS
)
from data_types import ProcessingStats, TranslationConfig, FileType, ProgressConfig
from file_utils import FileUtils
from json_utils import JsonUtils
from progressbar_utils import (
    ProgressContext, 
    progress_manager, 
    create_file_progress_config, 
    create_translation_progress_config,
    print_header, 
    print_section, 
    print_file_info, 
    print_result, 
    print_stats, 
    print_error, 
    print_warning, 
    print_success, 
    print_info
)

class TranslationService:
    """Service ƒë·ªÉ th·ª±c hi·ªán d·ªãch text"""
    
    def __init__(self, config: TranslationConfig):
        self.config = config
        self.stats = ProcessingStats()
    
    def translate_text(self, text: str, target_lang: str) -> str:
        """D·ªãch text sang ng√¥n ng·ªØ ƒë√≠ch"""
        try:
            if not text or text.strip() == "":
                return text
            
            # Skip n·∫øu text kh·ªõp v·ªõi pattern
            for pattern in SKIP_TRANSLATION_PATTERNS:
                if re.match(pattern, text):
                    return text
            
            # Skip n·∫øu text qu√° ng·∫Øn (1-2 k√Ω t·ª±)
            if len(text.strip()) <= 2:
                return text
            
            # Retry mechanism for network issues
            for attempt in range(self.config.max_retries):
                try:
                    result = GoogleTranslator(
                        source=self.config.source_language, 
                        target=target_lang
                    ).translate(text)
                    
                    time.sleep(self.config.delay_between_requests)
                    self.stats.translated_count += 1
                    return result
                    
                except KeyboardInterrupt:
                    # Re-raise KeyboardInterrupt to allow clean exit
                    raise
                    
                except Exception as network_error:
                    if attempt < self.config.max_retries - 1:
                        # Silent retry - progress bar will show overall progress
                        time.sleep(self.config.retry_delay)
                    else:
                        self.stats.failed_count += 1
                        return text
                        
        except KeyboardInterrupt:
            raise
            
        except Exception as e:
            self.stats.failed_count += 1
            return text

class LocalTextProcessor:
    """Class ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√°c file localText"""
    
    def __init__(self, translation_config: TranslationConfig):
        self.translation_service = TranslationService(translation_config)
        self.config = translation_config
        self.stats = ProcessingStats()
    
    def process_files(self, project_path: str, target_path: str = ".", file_type: str = "both") -> None:
        """
        X·ª≠ l√Ω c√°c file localText trong project
        
        Args:
            project_path: ƒê∆∞·ªùng d·∫´n t·ªõi project (vd: ../3385996759)
            target_path: ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi trong ModConf
            file_type: Lo·∫°i file c·∫ßn x·ª≠ l√Ω ('main', 'locale', 'both')
        """
        start_time = time.time()
        
        # X√¢y d·ª±ng ƒë∆∞·ªùng d·∫´n ModConf
        modconf_path = os.path.join(project_path, DIR_PATTERNS['modconf_path'])
        
        if not os.path.exists(modconf_path):
            print_error(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c", modconf_path)
            return
        
        print_info(f"Th∆∞ m·ª•c ModConf", modconf_path)
        
        # T√¨m t·∫•t c·∫£ file localText
        files = FileUtils.find_localtext_files(modconf_path, target_path)
        
        if not files:
            print_warning("Kh√¥ng t√¨m th·∫•y file localText n√†o!")
            return
        
        # Ph√¢n lo·∫°i file
        main_files = [f for f in files if not FileUtils.is_locale_file(f)]
        locale_files = [f for f in files if FileUtils.is_locale_file(f)]
        
        # L·ªçc file theo lo·∫°i ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if file_type == "main":
            files_to_process = main_files
            locale_files = []  # Kh√¥ng x·ª≠ l√Ω locale files
        elif file_type == "locale":
            files_to_process = locale_files
            main_files = []  # Kh√¥ng x·ª≠ l√Ω main files
        else:  # both
            files_to_process = files
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        stats_info = {
            "üìÅ T·ªïng s·ªë file t√¨m th·∫•y": len(files),
            "üìÑ Main files": len(main_files),
            "üåç Locale files": len(locale_files),
            "üéØ Lo·∫°i x·ª≠ l√Ω": file_type,
            "üåç Ng√¥n ng·ªØ target": ', '.join(self.config.target_languages)
        }
        if file_type != "both":
            stats_info["üìã S·∫Ω x·ª≠ l√Ω"] = f"{len(files_to_process)} file"
        
        print_stats(stats_info)
        
        try:
            # B∆∞·ªõc 1: X·ª≠ l√Ω main files
            if file_type in ["main", "both"] and main_files:
                print_section(f"X·ª≠ l√Ω {len(main_files)} main file")
                
                with ProgressContext(
                    len(main_files), 
                    "ƒêang x·ª≠ l√Ω main files...", 
                    create_file_progress_config("üìÑ")
                ) as progress:
                    for i, file_path in enumerate(main_files):
                        filename = os.path.basename(file_path)
                        # C·∫Øt ng·∫Øn filename cho progress display
                        display_name = filename[:25] + "..." if len(filename) > 25 else filename
                        progress.update(1, f"X·ª≠ l√Ω {display_name}")
                        
                        # Ch·ªâ t·∫°o locale files khi file_type l√† "both"
                        create_locales = (file_type == "both")
                        # T·∫Øt verbose output khi ƒëang c√≥ progress bar
                        if self.process_main_file(file_path, create_locales, verbose=False):
                            self.stats.processed_count += 1
            
            # B∆∞·ªõc 2: X·ª≠ l√Ω locale files (ch·ªâ khi file_type l√† "locale")
            if file_type == "locale" and locale_files:
                print_section(f"X·ª≠ l√Ω {len(locale_files)} locale file")
                
                with ProgressContext(
                    len(locale_files), 
                    "ƒêang x·ª≠ l√Ω locale files...", 
                    create_file_progress_config("üåç")
                ) as progress:
                    for file_path in locale_files:
                        filename = os.path.basename(file_path)
                        # C·∫Øt ng·∫Øn filename cho progress display
                        display_name = filename[:25] + "..." if len(filename) > 25 else filename
                        progress.update(1, f"X·ª≠ l√Ω {display_name}")
                        
                        if self.process_locale_file(file_path):
                            self.stats.processed_count += 1
        
        except KeyboardInterrupt:
            print_warning("Qu√° tr√¨nh x·ª≠ l√Ω ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            # Cleanup progress bars
            progress_manager.cleanup()
            raise
        
        # Th·ªëng k√™ k·∫øt qu·∫£
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        result_stats = {
            "üìÅ T·ªïng s·ªë file": len(files),
            "‚úÖ X·ª≠ l√Ω th√†nh c√¥ng": self.stats.processed_count,
            "üåç ƒê√£ d·ªãch": f"{self.translation_service.stats.translated_count} text",
            "‚ùå L·ªói d·ªãch": f"{self.translation_service.stats.failed_count} text",
            "‚è±Ô∏è Th·ªùi gian": f"{elapsed_time:.1f}s"
        }
        print_stats(result_stats)
    
    def process_main_file(self, file_path: str, create_locales: bool = True, verbose: bool = True) -> bool:
        """X·ª≠ l√Ω main file v√† t·∫°o c√°c locale file t∆∞∆°ng ·ª©ng (t√πy ch·ªçn)"""
        try:
            filename = os.path.basename(file_path)
            
            # ƒê·ªçc main file
            main_data = JsonUtils.read_json_file(file_path)
            if not main_data:
                if verbose:
                    print_result("‚ùå", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file {filename}")
                return False
            
            # Ki·ªÉm tra c·∫•u tr√∫c
            if not JsonUtils.validate_json_structure(main_data.data):
                if verbose:
                    print_result("‚ö†Ô∏è", f"File {filename} kh√¥ng c√≥ d·ªØ li·ªáu ti·∫øng Anh ƒë·ªÉ d·ªãch")
                return True  # Kh√¥ng ph·∫£i l·ªói, ch·ªâ l√† file kh√¥ng c·∫ßn d·ªãch
            
            # ƒê·∫øm s·ªë text c·∫ßn d·ªãch
            translatable_count = JsonUtils.get_translatable_count(main_data)
            
            if create_locales:
                # T·∫°o locale file cho m·ªói ng√¥n ng·ªØ
                for language in self.config.target_languages:
                    locale_file_path = FileUtils.create_locale_file_path(file_path, language)
                    
                    # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
                    FileUtils.ensure_directory_exists(locale_file_path)
                    
                    if verbose:
                        print_info(f"ƒêang d·ªãch {filename} sang {language}", f"{translatable_count} text")
                    
                    # T·∫°o progress-aware translator
                    progress_bar = progress_manager.create_progress(
                        f"translate_{language}", 
                        translatable_count, 
                        create_translation_progress_config()
                    )
                    progress_manager.set_active(f"translate_{language}")
                    
                    def progress_translator(text: str, target_lang: str) -> str:
                        result = self.translation_service.translate_text(text, target_lang)
                        progress_manager.update_active(1, f"D·ªãch: {text[:30]}{'...' if len(text) > 30 else ''}")
                        return result
                    
                    # T·∫°o d·ªØ li·ªáu locale
                    locale_data = JsonUtils.create_locale_data_from_main(
                        main_data, 
                        language, 
                        progress_translator
                    )
                    
                    # Ho√†n th√†nh progress bar
                    progress_manager.finish_active(f"Ho√†n th√†nh {language}")
                    
                    # S·∫Øp x·∫øp d·ªØ li·ªáu
                    locale_data = JsonUtils.sort_json_data(locale_data)
                    
                    # Ghi file
                    if JsonUtils.write_json_file(locale_file_path, locale_data):
                        print_result("‚úÖ", f"{language}", os.path.basename(locale_file_path))
                    else:
                        print_result("‚ùå", f"L·ªói ghi file {language}")
                        return False
            else:
                # Ch·ªâ x·ª≠ l√Ω main file, kh√¥ng t·∫°o locale files
                if verbose:
                    print_result("‚úÖ", f"ƒê√£ x·ª≠ l√Ω main file", filename)
            
            return True
            
        except KeyboardInterrupt:
            progress_manager.cleanup()
            raise
            
        except Exception as e:
            print_result("‚ùå", f"L·ªói x·ª≠ l√Ω file {filename}", str(e))
            return False
    
    def process_locale_file(self, file_path: str) -> bool:
        """X·ª≠ l√Ω locale file d·ª±a tr√™n main file t∆∞∆°ng ·ª©ng"""
        try:
            filename = os.path.basename(file_path)
            
            # D·ªçn d·∫πp file locale c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
            if os.path.exists(file_path):
                os.remove(file_path)
            
            # T√¨m main file t∆∞∆°ng ·ª©ng
            main_file_path = FileUtils.find_main_file(file_path)
            if not main_file_path:
                print_warning(f"Kh√¥ng t√¨m th·∫•y main file t∆∞∆°ng ·ª©ng cho {filename}")
                # Fallback: x·ª≠ l√Ω nh∆∞ main file
                return self.process_main_file(file_path)
            
            # X√°c ƒë·ªãnh ng√¥n ng·ªØ ƒë√≠ch
            target_lang = FileUtils.get_locale_language(file_path)
            if not target_lang:
                print_result("‚ùå", f"Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng√¥n ng·ªØ cho {filename}")
                return False
            
            # ƒê·ªçc main file
            main_data = JsonUtils.read_json_file(main_file_path)
            if not main_data:
                print_result("‚ùå", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c main file", main_file_path)
                return False
            
            # ƒê·∫øm s·ªë text c·∫ßn d·ªãch
            translatable_count = JsonUtils.get_translatable_count(main_data)
            
            print_info(f"T·∫°o l·∫°i {filename} cho {target_lang}", f"{translatable_count} text")
            
            # T·∫°o progress-aware translator cho locale file
            progress_bar = progress_manager.create_progress(
                f"locale_{target_lang}", 
                translatable_count, 
                create_translation_progress_config()
            )
            progress_manager.set_active(f"locale_{target_lang}")
            
            def progress_translator(text: str, target_lang: str) -> str:
                result = self.translation_service.translate_text(text, target_lang)
                progress_manager.update_active(1, f"D·ªãch: {text[:30]}{'...' if len(text) > 30 else ''}")
                return result
            
            # T·∫°o d·ªØ li·ªáu locale
            locale_data = JsonUtils.create_locale_data_from_main(
                main_data, 
                target_lang, 
                progress_translator
            )
            
            # Ho√†n th√†nh progress bar
            progress_manager.finish_active(f"Ho√†n th√†nh {target_lang}")
            
            # S·∫Øp x·∫øp d·ªØ li·ªáu
            locale_data = JsonUtils.sort_json_data(locale_data)
            
            # ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
            FileUtils.ensure_directory_exists(file_path)
            
            # Ghi file
            if JsonUtils.write_json_file(file_path, locale_data):
                print_result("‚úÖ", f"T·∫°o l·∫°i locale file cho {target_lang}")
                return True
            else:
                print_result("‚ùå", f"L·ªói ghi locale file {filename}")
                return False
                
        except KeyboardInterrupt:
            progress_manager.cleanup()
            raise
            
        except Exception as e:
            print_result("‚ùå", f"L·ªói x·ª≠ l√Ω locale file {filename}", str(e))
            return False

def parse_target_languages(languages_str: str) -> List[str]:
    """Parse chu·ªói ng√¥n ng·ªØ th√†nh list"""
    if not languages_str:
        return DEFAULT_TARGET_LANGUAGES
    
    if languages_str.lower() == 'all':
        return DEFAULT_TARGET_LANGUAGES
    
    # Parse danh s√°ch ng√¥n ng·ªØ
    languages = [lang.strip() for lang in languages_str.split(',') if lang.strip()]
    return languages if languages else DEFAULT_TARGET_LANGUAGES

def main():
    """H√†m main"""
    parser = argparse.ArgumentParser(
        description='Script x·ª≠ l√Ω v√† d·ªãch file localText.json',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
V√≠ d·ª• s·ª≠ d·ª•ng:
  python translate.py --project 3385996759 --path .
  python translate.py --project 3385996759 --path game_localText.json
  python translate.py --project 3385996759 --path . --dry-run
  python translate.py --project 3385996759 --path . --create-locales vi,es,fr
  python translate.py --project 3385996759 --path . --file-type main
  python translate.py --project 3385996759 --path . --file-type locale
        '''
    )
    
    parser.add_argument(
        '--project',
        required=True,
        help='T√™n th∆∞ m·ª•c project (vd: 3385996759)'
    )
    
    parser.add_argument(
        '--path', 
        required=True,
        help='ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi trong ModConf (folder ho·∫∑c file). Vd: "." cho to√†n b·ªô, "game_localText.json" cho file c·ª• th·ªÉ'
    )
    
    parser.add_argument(
        '--dry-run', 
        action='store_true', 
        help='Ch·ªâ hi·ªÉn th·ªã danh s√°ch file s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω, kh√¥ng th·ª±c hi·ªán d·ªãch'
    )
    
    parser.add_argument(
        '--create-locales',
        type=str,
        help='Danh s√°ch ng√¥n ng·ªØ c·∫ßn t·∫°o file locale, c√°ch nhau b·ªüi d·∫•u ph·∫©y. V√≠ d·ª•: vi,es,fr ho·∫∑c "all" cho t·∫•t c·∫£'
    )
    
    parser.add_argument(
        '--file-type',
        choices=['main', 'locale', 'both'],
        default='both',
        help='Lo·∫°i file c·∫ßn x·ª≠ l√Ω: main (ch·ªâ main files), locale (ch·ªâ locale files), both (c·∫£ hai - m·∫∑c ƒë·ªãnh)'
    )
    
    args = parser.parse_args()
    
    print_header(
        "Script X·ª≠ L√Ω LocalText.json",
        f"Project: {args.project} | Path: {args.path} | Type: {args.file_type}"
    )
    
    # X√¢y d·ª±ng ƒë∆∞·ªùng d·∫´n project
    project_path = os.path.join("..", args.project)
    
    if not os.path.exists(project_path):
        print_error("Kh√¥ng t√¨m th·∫•y project", project_path)
        return
    
    # Parse target languages
    target_languages = parse_target_languages(args.create_locales)
    print_info("Ng√¥n ng·ªØ locale", ', '.join(target_languages))
    
    # T·∫°o config
    translation_config = TranslationConfig(
        target_languages=target_languages,
        max_retries=TRANSLATION_CONFIG['max_retries'],
        delay_between_requests=TRANSLATION_CONFIG['delay_between_requests'],
        retry_delay=TRANSLATION_CONFIG['retry_delay'],
        source_language=TRANSLATION_CONFIG['source_language']
    )
    
    processor = LocalTextProcessor(translation_config)
    
    if args.dry_run:
        # Ch·ªâ hi·ªÉn th·ªã danh s√°ch file
        modconf_path = os.path.join(project_path, DIR_PATTERNS['modconf_path'])
        files = FileUtils.find_localtext_files(modconf_path, args.path)
        
        if files:
            # Ph√¢n lo·∫°i file ƒë·ªÉ hi·ªÉn th·ªã theo file_type
            main_files = [f for f in files if not FileUtils.is_locale_file(f)]
            locale_files = [f for f in files if FileUtils.is_locale_file(f)]
            
            if args.file_type == "main":
                files_to_show = main_files
            elif args.file_type == "locale":
                files_to_show = locale_files
            else:  # both
                files_to_show = files
            
            print_info(f"T√¨m th·∫•y {len(files)} file", f"hi·ªÉn th·ªã {len(files_to_show)} file lo·∫°i '{args.file_type}'")
            for i, file_path in enumerate(files_to_show, 1):
                rel_path = os.path.relpath(file_path, os.getcwd())
                file_info = FileUtils.get_file_info(file_path)
                print(f"  {i}. {rel_path} [{file_info.file_type.value}]")
        else:
            print_warning("Kh√¥ng t√¨m th·∫•y file n√†o!")
    else:
        # X·ª≠ l√Ω th·ª±c t·∫ø
        try:
            processor.process_files(project_path, args.path, args.file_type)
        except KeyboardInterrupt:
            print_warning("Qu√° tr√¨nh x·ª≠ l√Ω ƒë√£ b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            
            interrupt_stats = {
                "üìÅ ƒê√£ x·ª≠ l√Ω": f"{processor.stats.processed_count} file",
                "üåç ƒê√£ d·ªãch": f"{processor.translation_service.stats.translated_count} text"
            }
            print_stats(interrupt_stats)
            print_info("B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i l·ªánh ƒë·ªÉ ti·∫øp t·ª•c t·ª´ n∆°i ƒë√£ d·ª´ng")
            return
        except Exception as e:
            print_error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω", str(e))
            return

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d·ªãch localText.json cho mod GuiGuBaHuang
- D·ªãch "en", "tc", "ch", "kr" trong c√°c file ModConf/*localText.json
- C√°c ng√¥n ng·ªØ kh√°c ƒë·∫∑t trong folder locale: ModConf/*/*localText.json
- File locale d√πng combined key "en|tc|ch|kr"
- Kh√¥ng s·ª≠a c√°c gi√° tr·ªã ƒëang c√≥
"""

import json
import os
import glob
import subprocess
import sys
import time
import requests
import urllib.parse
import re
from pathlib import Path
from typing import Dict, List, Any
import argparse
import shutil

# ƒê·∫£m b·∫£o UTF-8 encoding cho Windows
if os.name == 'nt':  # Windows
    os.environ['PYTHONIOENCODING'] = 'utf-8'

class GoogleTranslator:
    """Google Translate API wrapper s·ª≠ d·ª•ng requests"""
    
    def __init__(self):
        self.base_url = "https://translate.googleapis.com/translate_a/single"
        self.max_length = 200
        
    def translate(self, text: str, dest: str, src: str = "auto") -> object:
        """D·ªãch text s·ª≠ d·ª•ng Google Translate API"""
        if not text or not text.strip() or len(text) > self.max_length:
            return type('obj', (object,), {'text': text})()
            
        try:
            # Encode text
            encoded_text = urllib.parse.quote(text)
            
            # T·∫°o URL
            params = {
                'client': 'gtx',
                'sl': src,
                'tl': dest,
                'dt': 't',
                'q': encoded_text
            }
            
            # G·ªçi API
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            
            # Parse JSON response
            data = response.json()
            if data and isinstance(data, list) and len(data) > 0:
                translations = data[0]
                if translations and isinstance(translations, list):
                    result_text = ''.join([item[0] for item in translations if item and len(item) > 0])
                    return type('obj', (object,), {'text': result_text or text})()
            
            return type('obj', (object,), {'text': text})()
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è  L·ªói d·ªãch: {e}")
            return type('obj', (object,), {'text': text})()

class LocalTextTranslator:
    def __init__(self):
        # Ng√¥n ng·ªØ ch√≠nh ƒë∆∞·ª£c d·ªãch tr·ª±c ti·∫øp trong file g·ªëc
        self.main_languages = ['en', 'tc', 'ch', 'kr']
        # Ng√¥n ng·ªØ kh√°c ƒë∆∞·ª£c ƒë·∫∑t trong folder locale
        self.locale_languages = ['vi', 'ja', 'es', 'la', 'ru']
        # Kh·ªüi t·∫°o Google Translator
        self.translator = GoogleTranslator()
        self.use_google_translate = False
        # Mapping ng√¥n ng·ªØ cho Google Translate
        self.lang_mapping = {
            'en': 'en',     # English
            'tc': 'zh-tw',  # Traditional Chinese
            'ch': 'zh-cn',  # Simplified Chinese
            'kr': 'ko',     # Korean
            'vi': 'vi',     # Vietnamese
            'ja': 'ja',     # Japanese
            'es': 'es',     # Spanish
            'la': 'la',     # Latin
            'ru': 'ru'      # Russian
        }
    
    def is_variable_name(self, text: str) -> bool:
        """Ki·ªÉm tra xem text c√≥ ph·∫£i l√† t√™n variable/constant kh√¥ng"""
        if not text or not text.strip():
            return False
            
        text = text.strip()
        
        # Hardcode exceptions - nh·ªØng t√™n variable/constant c·ª• th·ªÉ kh√¥ng ƒë∆∞·ª£c d·ªãch
        hardcode_exceptions = [
            'DEFAULT_DRAMA_OPT',
            # C√≥ th·ªÉ th√™m nhi·ªÅu t√™n kh√°c ·ªü ƒë√¢y
        ]
        
        # Ch·ªâ ki·ªÉm tra hardcode exceptions, kh√¥ng d√πng pattern
        return text in hardcode_exceptions
        
    def translate_text(self, text: str, target_lang: str, source_lang: str = 'auto') -> str:
        """D·ªãch text s·ª≠ d·ª•ng Google Translate"""
        if not self.use_google_translate or not text or not text.strip():
            return text
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i t√™n variable kh√¥ng - n·∫øu c√≥ th√¨ kh√¥ng d·ªãch
        if self.is_variable_name(text):
            return text
            
        try:
            # Chuy·ªÉn ƒë·ªïi language code
            source_google_lang = self.lang_mapping.get(source_lang, source_lang)
            target_google_lang = self.lang_mapping.get(target_lang, target_lang)
            
            # D·ªãch text
            result = self.translator.translate(text, dest=target_google_lang, src=source_google_lang)
            return result.text if result.text else text
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è  L·ªói d·ªãch '{text[:50]}...': {e}")
            return text
        
    def fix_json_syntax(self, root_dir: str):
        """G·ªçi script fix_json_syntax ƒë·ªÉ s·ª≠a l·ªói JSON tr∆∞·ªõc khi d·ªãch"""
        print("üîß S·ª≠a l·ªói JSON syntax tr∆∞·ªõc khi d·ªãch...")
        
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn script fix_json_syntax
        script_dir = os.path.dirname(os.path.abspath(__file__))
        fix_script = os.path.join(script_dir, "02-fix_json_syntax.py")
        
        if not os.path.exists(fix_script):
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y script: {fix_script}")
            return
        
        try:
            # G·ªçi script fix_json_syntax v·ªõi pattern cho localText files
            cmd = [sys.executable, fix_script, "--root", root_dir, "--pattern", "**/*localText.json"]
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='replace', env=env)
            
            if result.returncode == 0:
                print("‚úÖ Ho√†n th√†nh s·ª≠a l·ªói JSON syntax")
                # In output n·∫øu c√≥
                if result.stdout.strip():
                    print(result.stdout)
            else:
                print(f"‚ùå L·ªói khi ch·∫°y fix_json_syntax: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå L·ªói g·ªçi script fix_json_syntax: {e}")
            
    def fix_single_file_json_syntax(self, file_path: str):
        """G·ªçi script fix_json_syntax cho m·ªôt file c·ª• th·ªÉ"""
        file_name = os.path.basename(file_path)
        
        print(f"üîß S·ª≠a l·ªói JSON syntax cho file: {file_name}")
        
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn script fix_json_syntax
        script_dir = os.path.dirname(os.path.abspath(__file__))
        fix_script = os.path.join(script_dir, "02-fix_json_syntax.py")
        
        if not os.path.exists(fix_script):
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y script: {fix_script}")
            return
        
        try:
            # G·ªçi script fix_json_syntax cho file c·ª• th·ªÉ b·∫±ng c√°ch truy·ªÅn ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi
            cmd = [sys.executable, fix_script, "--root", os.path.dirname(file_path), "--pattern", file_name]
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='replace', env=env)
            
            if result.returncode == 0:
                print(f"  ‚úÖ Ho√†n th√†nh s·ª≠a l·ªói JSON syntax")
                # In output n·∫øu c√≥ (ch·ªâ in d√≤ng quan tr·ªçng)
                if result.stdout.strip():
                    lines = result.stdout.strip().split('\n')
                    for line in lines:
                        if 'Fixed' in line or 'Error' in line or file_name in line or '‚úÖ' in line or '‚ùå' in line:
                            print(f"    {line}")
            else:
                print(f"  ‚ùå L·ªói khi ch·∫°y fix_json_syntax: {result.stderr}")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói g·ªçi script fix_json_syntax: {e}")
            
    def cleanup_locale_files(self, root_dir: str):
        """G·ªçi script cleanup_locale ƒë·ªÉ d·ªçn d·∫πp file locale sau khi d·ªãch"""
        print("üßπ D·ªçn d·∫πp file locale...")
        
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn script cleanup_locale
        script_dir = os.path.dirname(os.path.abspath(__file__))
        cleanup_script = os.path.join(script_dir, "03-cleanup_locale.py")
        
        if not os.path.exists(cleanup_script):
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y script: {cleanup_script}")
            return
        
        try:
            # G·ªçi script cleanup_locale
            cmd = [sys.executable, cleanup_script, "--root", root_dir]
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='replace', env=env)
            
            if result.returncode == 0:
                print("‚úÖ Ho√†n th√†nh d·ªçn d·∫πp file locale")
                # In output n·∫øu c√≥
                if result.stdout.strip():
                    print(result.stdout)
            else:
                print(f"‚ùå L·ªói khi ch·∫°y cleanup_locale: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå L·ªói g·ªçi script cleanup_locale: {e}")
            
    def cleanup_single_file_locale(self, file_path: str):
        """G·ªçi script cleanup_locale cho c√°c file locale c·ªßa m·ªôt file c·ª• th·ªÉ"""
        file_dir = os.path.dirname(file_path)
        
        # T√¨m c√°c folder locale trong c√πng th∆∞ m·ª•c v·ªõi file
        locale_files = []
        for lang in self.locale_languages:
            locale_dir = os.path.join(file_dir, lang)
            if os.path.exists(locale_dir):
                locale_file = os.path.join(locale_dir, os.path.basename(file_path))
                if os.path.exists(locale_file):
                    locale_files.append(locale_file)
        
        if not locale_files:
            return  # Kh√¥ng c√≥ file locale n√†o
            
        print(f"üßπ D·ªçn d·∫πp locale cho file: {os.path.basename(file_path)}")
        
        # ƒê∆∞·ªùng d·∫´n ƒë·∫øn script cleanup_locale
        script_dir = os.path.dirname(os.path.abspath(__file__))
        cleanup_script = os.path.join(script_dir, "03-cleanup_locale.py")
        
        if not os.path.exists(cleanup_script):
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y script: {cleanup_script}")
            return
        
        try:
            # G·ªçi script cleanup_locale cho t·ª´ng file locale
            for locale_file in locale_files:
                cmd = [sys.executable, cleanup_script, "--file", locale_file]
                env = os.environ.copy()
                env['PYTHONIOENCODING'] = 'utf-8'
                result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', errors='replace', env=env)
                
                if result.returncode == 0:
                    # In output n·∫øu c√≥ (ch·ªâ in d√≤ng quan tr·ªçng)
                    if result.stdout.strip():
                        lines = result.stdout.strip().split('\n')
                        for line in lines:
                            if 'Removed' in line or 'Cleaned' in line or 'duplicate' in line.lower() or '‚úÖ' in line or '‚ùå' in line:
                                print(f"    {line}")
                else:
                    print(f"  ‚ùå L·ªói khi ch·∫°y cleanup_locale cho {locale_file}: {result.stderr}")
                    
            print(f"  ‚úÖ Ho√†n th√†nh d·ªçn d·∫πp {len(locale_files)} file locale")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói g·ªçi script cleanup_locale: {e}")
        
    def get_source_text(self, entry: Dict[str, Any]) -> tuple:
        """L·∫•y text ngu·ªìn ƒë·ªÉ copy (∆∞u ti√™n en > ch > tc > kr)"""
        priority = ['en', 'ch', 'tc', 'kr']
        
        for lang in priority:
            if lang in entry and entry[lang] and entry[lang].strip():
                return entry[lang], lang
                
        # N·∫øu kh√¥ng c√≥, th·ª≠ t√¨m trong combined key
        for combined_key in [
            'ch|en|tc|kr', 'en|tc|ch|kr', 'en|ch|tc|kr', 'tc|en|ch|kr',
            'kr|en|tc|ch', 'en|kr|tc|ch', 'tc|kr|en|ch', 'ch|kr|en|tc',
            'kr|ch|en|tc', 'kr|tc|en|ch', 'tc|ch|en|kr', 'ch|tc|en|kr',
            # B·ªï sung c√°c t·ªï h·ª£p 3 ng√¥n ng·ªØ
            'en|tc|ch', 'en|ch|tc', 'tc|en|ch', 'tc|ch|en', 'ch|en|tc', 'ch|tc|en',
            'en|kr|tc', 'en|tc|kr', 'tc|en|kr', 'tc|kr|en', 'kr|en|tc', 'kr|tc|en',
            'en|kr|ch', 'en|ch|kr', 'ch|en|kr', 'ch|kr|en', 'kr|en|ch', 'kr|ch|en',
            'tc|kr|ch', 'tc|ch|kr', 'kr|tc|ch', 'kr|ch|tc', 'ch|tc|kr', 'ch|kr|tc',
            # B·ªï sung c√°c t·ªï h·ª£p 2 ng√¥n ng·ªØ
            'en|tc', 'tc|en', 'en|ch', 'ch|en', 'en|kr', 'kr|en',
            'tc|ch', 'ch|tc', 'tc|kr', 'kr|tc', 'ch|kr', 'kr|ch'
        ]:
            if combined_key in entry and entry[combined_key]:
                return entry[combined_key], 'auto'
                
        return "", "auto"
    
    def process_main_file(self, file_path: str, target_langs: List[str]):
        """X·ª≠ l√Ω file localText ch√≠nh - d·ªãch en, tc, ch, kr"""
        print(f"\nüìÑ X·ª≠ l√Ω file ch√≠nh: {os.path.basename(file_path)}")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            modified = False
            
            for entry in data:
                if not isinstance(entry, dict):
                    continue
                    
                source_text, source_lang = self.get_source_text(entry)
                if not source_text:
                    continue
                    
                # Ch·ªâ d·ªãch c√°c ng√¥n ng·ªØ ch√≠nh
                for target_lang in target_langs:
                    if target_lang not in self.main_languages:
                        continue
                        
                    # B·ªè qua n·∫øu ƒë√£ c√≥ translation
                    if target_lang in entry and entry[target_lang] and entry[target_lang].strip():
                        continue
                    
                    # D·ªãch ho·∫∑c copy text
                    if source_lang == target_lang or not self.use_google_translate:
                        # N·∫øu c√πng ng√¥n ng·ªØ ho·∫∑c kh√¥ng d√πng Google Translate th√¨ copy
                        translated_text = source_text
                        print(f"  üìù Copy {source_lang} -> {target_lang}: {entry.get('key', 'Unknown')}")
                    elif self.is_variable_name(source_text):
                        # N·∫øu l√† t√™n variable th√¨ kh√¥ng d·ªãch, ch·ªâ copy
                        translated_text = source_text
                        print(f"  üîß Variable {source_lang} -> {target_lang}: {entry.get('key', 'Unknown')} = '{source_text}'")
                    else:
                        # D·ªãch b·∫±ng Google Translate
                        print(f"  üåê D·ªãch {source_lang} -> {target_lang}: {entry.get('key', 'Unknown')}")
                        translated_text = self.translate_text(source_text, target_lang, source_lang)
                        # Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
                        time.sleep(0.1)
                    
                    entry[target_lang] = translated_text
                    modified = True
            
            # L∆∞u file n·∫øu c√≥ thay ƒë·ªïi
            if modified:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent='\t')
                print(f"  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t")
            else:
                print(f"  ‚ÑπÔ∏è  Kh√¥ng c√≥ thay ƒë·ªïi")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
    
    def create_locale_file(self, source_file: str, target_lang: str, source_data: List[Dict]):
        """T·∫°o file localText trong folder locale"""
        source_dir = os.path.dirname(source_file)
        locale_dir = os.path.join(source_dir, target_lang)
        
        # T·∫°o th∆∞ m·ª•c locale n·∫øu ch∆∞a c√≥
        os.makedirs(locale_dir, exist_ok=True)
        
        target_file = os.path.join(locale_dir, os.path.basename(source_file))
        
        print(f"üìÅ T·∫°o file locale: {target_lang}/{os.path.basename(source_file)}")
        
        try:
            locale_data = []
            
            for entry in source_data:
                if not isinstance(entry, dict):
                    continue
                    
                # T·∫°o entry m·ªõi cho locale
                locale_entry = {
                    "id": entry.get("id", ""),
                    "key": entry.get("key", "")
                }
                
                # L·∫•y text ngu·ªìn
                source_text, source_lang = self.get_source_text(entry)
                if source_text:
                    # S·ª≠ d·ª•ng combined key cho file locale
                    locale_entry["en|tc|ch|kr"] = source_text
                
                locale_data.append(locale_entry)
            
            # L∆∞u file locale
            with open(target_file, 'w', encoding='utf-8') as f:
                json.dump(locale_data, f, ensure_ascii=False, indent='\t')
            print(f"  ‚úÖ ƒê√£ t·∫°o file locale")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
    
    def update_locale_file(self, file_path: str, source_data: List[Dict]):
        """C·∫≠p nh·∫≠t file locale c√≥ s·∫µn"""
        print(f"üìÅ C·∫≠p nh·∫≠t file locale: {os.path.basename(file_path)}")
        
        try:
            # ƒê·ªçc file locale hi·ªán t·∫°i
            with open(file_path, 'r', encoding='utf-8') as f:
                locale_data = json.load(f)
                
            # T·∫°o map ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
            locale_map = {entry.get('key', ''): entry for entry in locale_data if isinstance(entry, dict)}
            
            modified = False
            
            for source_entry in source_data:
                if not isinstance(source_entry, dict):
                    continue
                    
                key = source_entry.get('key', '')
                if not key:
                    continue
                    
                # Ki·ªÉm tra xem entry ƒë√£ t·ªìn t·∫°i ch∆∞a
                if key in locale_map:
                    locale_entry = locale_map[key]
                    # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a c√≥ combined key ho·∫∑c r·ªóng
                    if "en|tc|ch|kr" not in locale_entry or not locale_entry["en|tc|ch|kr"]:
                        source_text, source_lang = self.get_source_text(source_entry)
                        if source_text:
                            print(f"  üìù C·∫≠p nh·∫≠t {source_lang}: {key}")
                            locale_entry["en|tc|ch|kr"] = source_text
                            modified = True
                else:
                    # Th√™m entry m·ªõi
                    source_text, source_lang = self.get_source_text(source_entry)
                    if source_text:
                        new_entry = {
                            "id": source_entry.get("id", ""),
                            "key": key,
                            "en|tc|ch|kr": source_text
                        }
                        locale_data.append(new_entry)
                        print(f"  üìù Th√™m m·ªõi {source_lang}: {key}")
                        modified = True
            
            # L∆∞u file n·∫øu c√≥ thay ƒë·ªïi
            if modified:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(locale_data, f, ensure_ascii=False, indent='\t')
                print(f"  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t")
            else:
                print(f"  ‚ÑπÔ∏è  Kh√¥ng c√≥ thay ƒë·ªïi")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
    
    
    def translate_all(self, root_dir: str, target_langs: List[str], target_path: str = None):
        """D·ªãch t·∫•t c·∫£ file localText theo quy t·∫Øc:
        - en, tc, ch, kr: d·ªãch tr·ª±c ti·∫øp trong file g·ªëc
        - Ng√¥n ng·ªØ kh√°c: t·∫°o file trong folder locale v·ªõi combined key
        """
        print(f"üöÄ D·ªãch localText trong: {root_dir}")
        if target_path:
            print(f"üéØ Target: {target_path}")
        print(f"üéØ Ng√¥n ng·ªØ: {', '.join(target_langs)}")
        
        # T√¨m file localText theo target
        main_files = self._find_target_files(root_dir, target_path)
        
        print(f"üìä T√¨m th·∫•y {len(main_files)} file localText ch√≠nh")
        
        # X·ª≠ l√Ω t·ª´ng file
        for i, file_path in enumerate(main_files, 1):
            print(f"\n[{i}/{len(main_files)}] ƒêang x·ª≠ l√Ω: {os.path.relpath(file_path, root_dir)}")
            
            # S·ª≠a l·ªói JSON syntax cho file n√†y tr∆∞·ªõc
            self.fix_single_file_json_syntax(file_path)
            
            # D·ªçn d·∫πp locale tr∆∞·ªõc khi x·ª≠ l√Ω file n√†y
            self.cleanup_single_file_locale(file_path)
            
            try:
                # ƒê·ªçc d·ªØ li·ªáu g·ªëc
                with open(file_path, 'r', encoding='utf-8') as f:
                    source_data = json.load(f)
                
                # X·ª≠ l√Ω ng√¥n ng·ªØ ch√≠nh (en, tc, ch, kr)
                main_langs = [lang for lang in target_langs if lang in self.main_languages]
                if main_langs:
                    self.process_main_file(file_path, main_langs)
                    # ƒê·ªçc l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
                    with open(file_path, 'r', encoding='utf-8') as f:
                        source_data = json.load(f)
                
                # X·ª≠ l√Ω ng√¥n ng·ªØ locale
                locale_langs = [lang for lang in target_langs if lang in self.locale_languages]
                for locale_lang in locale_langs:
                    locale_file_path = self._get_locale_file_path(file_path, locale_lang)
                    
                    if os.path.exists(locale_file_path):
                        # C·∫≠p nh·∫≠t file locale c√≥ s·∫µn
                        self.update_locale_file(locale_file_path, source_data)
                    else:
                        # T·∫°o file locale m·ªõi
                        self.create_locale_file(file_path, locale_lang, source_data)
                        
            except Exception as e:
                print(f"  ‚ùå L·ªói x·ª≠ l√Ω file: {e}")
        
        print(f"\nüéâ Ho√†n th√†nh d·ªãch {len(main_files)} file!")
        
        if main_files:
            print("üí° L∆∞u √Ω:")
            print(f"  ‚Ä¢ M·ªói file ƒë∆∞·ª£c s·ª≠a l·ªói JSON syntax v√† d·ªçn d·∫πp locale tr∆∞·ªõc khi x·ª≠ l√Ω")
            print(f"  ‚Ä¢ Ng√¥n ng·ªØ ch√≠nh ({', '.join(self.main_languages)}) ƒë∆∞·ª£c d·ªãch tr·ª±c ti·∫øp trong file g·ªëc")
            print(f"  ‚Ä¢ Ng√¥n ng·ªØ locale ({', '.join(self.locale_languages)}) ƒë∆∞·ª£c t·∫°o trong folder ri√™ng v·ªõi combined key")
        else:
            print("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x·ª≠ l√Ω!")
    
    def _find_target_files(self, root_dir: str, target_path: str = None) -> List[str]:
        """T√¨m file localText d·ª±a tr√™n target path"""
        if target_path:
            full_target_path = os.path.join(root_dir, target_path)
            
            if os.path.isfile(full_target_path):
                # N·∫øu target l√† file c·ª• th·ªÉ
                if full_target_path.endswith('localText.json') and not self._is_locale_file(full_target_path):
                    print(f"üéØ D·ªãch file: {target_path}")
                    return [full_target_path]
                else:
                    print(f"‚ùå File kh√¥ng ph·∫£i localText.json ho·∫∑c l√† file locale: {target_path}")
                    return []
            elif os.path.isdir(full_target_path):
                # N·∫øu target l√† folder
                pattern = os.path.join(full_target_path, "**", "*localText.json")
                files = glob.glob(pattern, recursive=True)
                files = [f for f in files if os.path.isfile(f) and not self._is_locale_file(f)]
                print(f"üéØ D·ªãch folder: {target_path} ({len(files)} file)")
                return files
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y file/folder: {target_path}")
                return []
        else:
            # T√¨m t·∫•t c·∫£ file ModConf/*localText.json (kh√¥ng bao g·ªìm locale)
            pattern = os.path.join(root_dir, "**", "ModConf", "*localText.json")
            files = glob.glob(pattern, recursive=True)
            files = [f for f in files if os.path.isfile(f) and not self._is_locale_file(f)]
            print(f"üéØ D·ªãch to√†n b·ªô workspace ({len(files)} file)")
            return files
    
    def _is_locale_file(self, file_path: str) -> bool:
        """Ki·ªÉm tra xem file c√≥ n·∫±m trong folder locale kh√¥ng"""
        parent_dir = os.path.basename(os.path.dirname(file_path))
        return parent_dir in self.locale_languages
    
    def _get_locale_file_path(self, source_file: str, locale_lang: str) -> str:
        """T·∫°o ƒë∆∞·ªùng d·∫´n file locale"""
        source_dir = os.path.dirname(source_file)
        locale_dir = os.path.join(source_dir, locale_lang)
        return os.path.join(locale_dir, os.path.basename(source_file))

def main():
    parser = argparse.ArgumentParser(description='D·ªãch file localText.json cho mod GuiGuBaHuang')
    parser.add_argument('--root', '-r', default='.', help='Th∆∞ m·ª•c g·ªëc ch·ª©a c√°c mod')
    parser.add_argument('--langs', '-l', default='en,tc,ch,kr,vi', help='Ng√¥n ng·ªØ c·∫ßn d·ªãch (c√°ch nhau b·ªüi d·∫•u ph·∫©y)')
    parser.add_argument('--translate', '-t', action='store_true', help='S·ª≠ d·ª•ng Google Translate thay v√¨ copy text')
    parser.add_argument('--target', default=None, help='File ho·∫∑c folder c·ª• th·ªÉ c·∫ßn d·ªãch (relative ƒë·∫øn root)')
    
    args = parser.parse_args()
    
    root_dir = os.path.abspath(args.root)
    target_langs = [lang.strip() for lang in args.langs.split(',')]
    
    translator = LocalTextTranslator()
    translator.use_google_translate = args.translate
    
    if args.translate:
        print("üåê S·ª≠ d·ª•ng Google Translate ƒë·ªÉ d·ªãch text")
    else:
        print("üìù Ch·ªâ copy text gi·ªØa c√°c ng√¥n ng·ªØ")
    
    translator.translate_all(root_dir, target_langs, args.target)

if __name__ == "__main__":
    main()
